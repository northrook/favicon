<?php

namespace Northrook\Favicon;

use GdImage;
use Intervention\Image\Drivers\Gd\Decoders\FilePathImageDecoder;
use Intervention\Image\Drivers\Gd\Decoders\GdImageDecoder;
use Intervention\Image\Image;
use Intervention\Image\ImageManager;
use Northrook\Logger\Log;
use Northrook\Support\File;
use Northrook\Types\Path;
use SVG\SVG;


class FaviconBundle {

    public const SIZES = [
        'favicon-16x16.png'            => 16,
        'favicon-32x32.png'            => 32,
        'android-chrome-36x36.png'     => 36,
        'android-chrome-48x48.png'     => 48,
        'android-chrome-72x72.png'     => 72,
        'android-chrome-96x96.png'     => 96,
        'android-chrome-144x144.png'   => 144,
        'android-chrome-192x192.png'   => 192,
        'android-chrome-256x256.png'   => 256,
        'android-chrome-384x384.png'   => 384,
        'android-chrome-512x512.png'   => 512,
        'mstile-70x70.png'             => 70,
        'mstile-144x144.png'           => 144,
        'mstile-150x150.png'           => 150,
        'mstile-310x310.png'           => 310,
        'mstile-310x150.png'           => [ 310, 150 ],
        'apple-touch-icon.png'         => 57,
        'apple-touch-icon-57x57.png'   => 57,
        'apple-touch-icon-60x60.png'   => 60,
        'apple-touch-icon-72x72.png'   => 72,
        'apple-touch-icon-76x76.png'   => 76,
        'apple-touch-icon-114x114.png' => 114,
        'apple-touch-icon-120x120.png' => 120,
        'apple-touch-icon-144x144.png' => 144,
        'apple-touch-icon-152x152.png' => 152,
        'apple-touch-icon-180x180.png' => 180,
    ];
    public ?SVG                      $svg     = null;
    public readonly IcoFileGenerator $favicon;
    public readonly Manifest         $manifest;
    private array                    $notices = [];
    private Image                    $icon;

    /**
     * @param null |SVG|Path|string $source Provide a pre-typed {@see SVG} or {@see Path} or a string path to an SVG or PNG file.
     * @param ?Manifest             $manifest
     */
    public function __construct(
        null | SVG | Path | string $source = null,
        ?Manifest $manifest = null
    ) {
        if ( $source ) {
            $this->load( $source );
        }

        $this->manifest = $manifest ?? new Manifest();
    }

    public function load( SVG | Path | string $source ) : void {

        if ( $source instanceof SVG ) {
            $this->svg = $source;
        }
        else {
            $source = is_string( $source ) ? new Path( $source ) : $source;

            if ( ! $source->exists ) {
                Log::Error( '{source} is not a valid file.', [ 'source' => $source ] );
                return;
            }

            if ( ! str_contains( mime_content_type( $source->value ), 'image/' ) ) {
                $this->notices = [ 'The provided source image must be an image.' ];
                Log::Error( '{source} is not an image.', [ 'source' => $source ] );
                return;
            }

            if ( $source->extension === 'svg' ) {
                $this->svg = SVG::fromFile( $source->value );
            }
        }

        if ( ! $this->svg ) {
            $this->icon = ImageManager::gd()->read( $source->value, FilePathImageDecoder::class );
        }
        else {
            $this->icon = ImageManager::gd()->read( $this->svgResource(), GdImageDecoder::class );
        }

        $this->favicon = new IcoFileGenerator( imagecreatefromstring( $this->icon->toPng()->toString() ) );


        // $this->icon = ImageManager::gd()->read( $this->resource, GdImageDecoder::class );

        // dump(file_get_contents($source));
        // $this->resource = $this->svg ? $this->svgResource() : ImageManager::gd()->read( $source->value,  FilePathImageDecoder::class );
        // $this->ico      = new IcoFileGenerator( $this->resource );
        // $this->icon     = ImageManager::gd()->read( $this->resource, GdImageDecoder::class );
    }

    /**
     * @param int      $width
     * @param null|int $height
     *
     * @return GdImage | resource
     */
    public function svgResource( int $width = 512, ?int $height = null ) : GdImage | string {
        return $this->svg->toRasterImage( $width, $height ?? $width );
    }

    /**
     * Delete all generated files from the public root path.
     *
     * * This method does not check if the files were generated by this class.
     *
     * @param Path|string $publicRootPath
     *
     * @return array
     */
    public function purge( Path | string $publicRootPath ) : array {

        if ( is_string( $publicRootPath ) ) {
            $publicRootPath = new Path( $publicRootPath );
        }

        $purge = array_merge(
            [
                'favicon.ico',
                'favicon.svg',
                'safari-pinned-tab.svg',
                'manifest.json',
                'site.webmanifest', // We don't generate this file, but remove preexisting one prevent duplicates.
                'browserconfig.xml',
            ],
            array_keys( FaviconBundle::SIZES ),
        );

        $purged = [];

        foreach ( $purge as $file ) {
            if ( file_exists( $publicRootPath . $file )
                 && File::remove( $publicRootPath . $file )
            ) {
                $purged[] = $file;
            }
        }

        return $purged;
    }

    public function save( Path | string $publicRootPath ) : array {
        if ( is_string( $publicRootPath ) ) {
            $publicRootPath = new Path( $publicRootPath );
        }

        if ( ! $publicRootPath->isDir ) {
            $this->notices[] = 'The provided public root path is not a valid directory.';
            Log::Error(
                '{publicRootPath} is not a directory.', [ 'publicRootPath' => $publicRootPath, ],
            );

            return $this->notices;
        }

        $this->notices[ 'purge' ] = $this->purge( $publicRootPath );

        $this->notices[ 'favicon.ico' ] = $this->favicon->save( $publicRootPath . 'favicon.ico' );
        if ( $this->svg ) {
            $this->notices[ 'favicon.svg' ] = File::save( $publicRootPath . 'favicon.svg', $this->svg->toXMLString() );
        }

        // TODO : Parse the SVG and replace each color with the theme color
        // $safari = $this->svg->toXMLString();
        // $this->notices[ 'safari-pinned-tab.svg' ] = File::save( $publicRootPath . 'safari-pinned-tab.svg',  );

        // $this->image->save( $publicRootPath . 'favicon.png', 100 );

        $icons = [];
        $tiles = [];

        foreach ( FaviconBundle::SIZES as $name => $size ) {
            $image  = clone $this->icon;
            $width  = is_array( $size ) ? $size[ 0 ] : $size;
            $height = is_array( $size ) ? $size[ 1 ] : $size;
            $image->scaleDown( $width, $height );
            $image->save( $publicRootPath . $name );


            if ( str_starts_with( $name, 'android-chrome' ) ) {
                $icons[] = [
                    'src'   => "/$name",
                    'sizes' => "{$size}x$size",
                    'type'  => 'image/png',
                ];
            }
            if ( is_int( $size ) && str_starts_with( $name, 'mstile' ) ) {
                $tiles[ "square{$size}x{$size}logo" ] = $name;
            }
        }


        $this->manifest->icons( $icons );

        $manifest = $this->manifest->generate();

        $this->notices[ 'manifest.json' ] = File::save( $publicRootPath . 'manifest.json', $manifest );

        $browserconfig = new BrowserConfigGenerator( 'ff0000', $tiles );

        $this->notices[ 'browserconfig.xml' ] = File::save( $publicRootPath . 'browserconfig.xml', $browserconfig );

        return $this->notices;
    }

    public static function links( ?string $themeColor = null ) : array {
        $links = [
            [
                'rel'  => 'apple-touch-icon',
                'type' => 'image/png',
                'href' => '/apple-touch-icon.png',
            ],
            [
                'rel'  => 'icon',
                'type' => 'image/png',
                'href' => '/favicon-32x32.png',
            ],
            [
                'rel'  => 'icon',
                'type' => 'image/png',
                'href' => '/android-chrome-192x192.png',
            ],
            [
                'rel'  => 'icon',
                'type' => 'image/png',
                'href' => '/favicon-16x16.png',
            ],
            [
                'rel'  => 'icon',
                'type' => 'image/svg+xml',
                'href' => '/favicon.svg',
            ],
            [
                'rel'  => 'manifest',
                'href' => '/manifest.json',
            ],
            [
                'rel'  => 'shortcut icon',
                'href' => '/favicon.ico',
            ],
        ];

        if ( $themeColor ) {
            $links[] = [
                'rel'   => 'mask-icon',
                'href'  => '/safari-pinned-tab.svg',
                'color' => $themeColor,
            ];
        }

        return $links;
    }

    public function notices() : array {
        return $this->notices;
    }
}